<%- include('partials/head') %>
<%- include('partials/navbar') %>

<div class="grid-containers">
    <div class="grid-items item1">
        <%- include('partials/menu') %>
    </div>
    <div class="grid-items item2">
        <canvas id="myChart" width="370" height="240"></canvas>
    </div>
    <div class="grid-items item3">
        <canvas id="myChart2" width="370" height="240"></canvas>
    </div>
    <div class="grid-items item4">
      <div class="container">
        <div class="form-container">
          <form id="updateForm">
            <label>Search by Core Part Number</label>
            <input type="text" id="corenumber" name="corenumber" required>
      
            <label>Input Core Volume</label>
            <input type="number" id="volumn" name="volumn" required>
      
            <button type="submit">Submit</button>
            <button onclick="window.location.reload();">Refresh</button>
          </form>
        </div>
      
        <div class="table-container">
          <table id="stockTable">
            <thead>
              <tr>
                <th>Part Number</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
            </tbody>
          </table>
        </div>
      </div>      
</div>
  
</div>

<link rel="stylesheet" href="/styles.css">
<script src="/js/statusUpdate.js"></script>
</body>
</html>
<script>
  const ctx1 = document.getElementById("myChart").getContext("2d");
  const ctx2 = document.getElementById("myChart2").getContext("2d");
  

  const gradient1 = ctx1.createLinearGradient(0, 0, 0, 800);
  gradient1.addColorStop(0, "rgb(63, 0, 113)");
  gradient1.addColorStop(0.33, "rgb(251, 37, 118)");
  gradient1.addColorStop(0.66, "rgb(51, 47, 208)");
  gradient1.addColorStop(1, "rgb(0, 2, 161)");
  
  const gradient2 = ctx2.createLinearGradient(0, 0, 0, 800);
  gradient2.addColorStop(0, "rgb(0, 128, 255)");
  gradient2.addColorStop(0.5, "rgb(0, 255, 128)");
  gradient2.addColorStop(1, "rgb(255, 128, 0)");
  
  const myChart = new Chart(ctx1, {
    type: "bar",
    data: {
      labels: [],
      datasets: [
        {
          label: "Press Part",
          data: [],
          backgroundColor: gradient1,
          borderColor: "rgba(0, 0, 0, 0)",
          borderWidth: 1,
        },
      ],
    },
    options: {
      responsive: true,
      scales: {
        x: {
          title: { display: true, text: "Part Number", color: "white", font: { size: 12 } },
          ticks: { color: "white", font: { size: 18 } },
          grid: { color: "rgba(186, 223, 238, 0.5)" },
        },
        y: {
          beginAtZero: true,
          title: { display: true, text: "Quantity", color: "white", font: { size: 12 } },
          ticks: { color: "white" },
          grid: { color: "rgba(186, 223, 238, 0.5)" },
        },
      },
      plugins: {
        legend: { labels: { color: "lightblue", font: { size: 14 } } },
        datalabels: {
          color: "white",
          anchor: "center",
          align: "center",
          font: { weight: "bold", size: 16 },
          formatter: (value) => value,
        },
      },
    },
    plugins: [ChartDataLabels],
  });
  
  const myChart2 = new Chart(ctx2, {
    type: "bar",
    data: {
      labels: [],
      datasets: [
        {
          label: "Center Repack",
          data: [],
          backgroundColor: gradient2,
          borderColor: "rgba(0, 0, 0, 0)",
          borderWidth: 1,
        },
      ],
    },
    options: {
      responsive: true,
      scales: {
        x: {
          title: { display: true, text: "Part Number", color: "white", font: { size: 12 } },
          ticks: { color: "white", font: { size: 18 } },
          grid: { color: "rgba(186, 223, 238, 0.5)" },
        },
        y: {
          beginAtZero: true,
          title: { display: true, text: "Change", color: "white", font: { size: 12 } },
          ticks: { color: "white" },
          grid: { color: "rgba(186, 223, 238, 0.5)" },
        },
      },
      plugins: {
        legend: { labels: { color: "lightblue", font: { size: 14 } } },
        datalabels: {
          color: "white",
          anchor: "center",
          align: "center",
          font: { weight: "bold", size: 16 },
          formatter: (value) => value,
        },
      },
    },
    plugins: [ChartDataLabels],
  });   

  document.addEventListener("DOMContentLoaded", () => {
    fetch('http://192.168.1.103:3000/api/getMain1')
      .then(response => response.json())
      .then(data => {
        myChart.data.labels = data.part_no;
        myChart.data.datasets[0].data = data.quantity;
        myChart.update();
      })
      .catch(error => console.error('Error fetching myChart data:', error));
  
    fetch('http://192.168.1.103:3000/api/getMain2')
      .then(response => response.json())
      .then(data => {
        myChart2.data.labels = data.part_no;
        myChart2.data.datasets[0].data = data.quantity;
        myChart2.update();
      })
      .catch(error => console.error('Error fetching myChart2 data:', error));
  });

  document.getElementById("updateForm").addEventListener("submit", async function (event) {
    event.preventDefault();
  
    const coreNumber = document.getElementById("corenumber").value;
    const volume = parseInt(document.getElementById("volumn").value, 10);
  
    if (!coreNumber || isNaN(volume)) {
      alert("กรุณากรอกข้อมูลให้ครบถ้วน");
      return;
    }
  
    try {
      const response = await fetch("http://192.168.1.103:3000/api/getStockData", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ coreNumber, volume })
      });
  
      const data = await response.json();
  
      if (!data.success) {
        alert("ไม่พบข้อมูลที่ต้องการ");
        return;
      }
      const tableBody = document.querySelector('#stockTable tbody');
      data.tableData.forEach(row => {
        const tableRow = document.createElement('tr');
        const partNumberCell = document.createElement('td');
        const statusCell = document.createElement('td');
        
        partNumberCell.textContent = row.partNumber;
        statusCell.textContent = row.status;

        tableRow.appendChild(partNumberCell);
        tableRow.appendChild(statusCell);
        tableBody.appendChild(tableRow);
      });
      const labels = data.labels;
      const quantities = data.values; 
      const channels = data.channels;
      const changes = data.changes;   
  
      
      myChart.data.labels = labels;
      myChart.data.datasets[0].data = quantities;
      myChart.update();
  
      myChart2.data.labels = channels;
      myChart2.data.datasets[0].data = changes;
      myChart2.update();
      
    } catch (error) {
      console.error("Error fetching data:", error);
      alert("เกิดข้อผิดพลาดในการดึงข้อมูล");
    }
  });
  
</script>
<style>
.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  background: #badfee;
  min-height: 100%;
  border-radius: 12px;
}


.form-container {
  width: 100%;
  padding: 20px;
  background: #2b3467;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  font-family: Arial, sans-serif;
  margin-bottom: 20px; 
}


#updateForm label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
  color: #cbdceb;
}

#updateForm input {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
}

#updateForm input:focus {
  border-color: #007bff;
  outline: none;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

#updateForm button {
  width: 100%;
  padding: 10px;
  background: #007bff;
  color: #badfee;
  border: none;
  border-radius: 5px;
  font-size: 18px;
  cursor: pointer;
  transition: background 0.3s ease-in-out;
}

#updateForm button:hover {
  background: #0056b3;
}

.table-container {
  width: 100%;
  max-height: 500px;
  overflow-y: auto; 
  background: #2b3467;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  padding: 10px;
}

#stockTable {
  width: 100%;
  border-collapse: collapse;
  text-align: left;
}

#stockTable thead {
  background: #007bff;
  color: #badfee;
}


#stockTable th, #stockTable td {
  color: #cbdceb;
  padding: 10px;
  border-bottom: 1px solid #badfee;
}

#stockTable td.ok {
  color: green;
  font-weight: bold;
}

#stockTable td.ng {
  color: red;
  font-weight: bold;
}

</style>